template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM##Alloc(const TaskNode &task_node,
                                                  Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task =
    CHI_CLIENT->AllocateTask<CUSTOM##Task>();
  Async##CUSTOM##Construct(task.ptr_, task_node, std::forward<Args>(args)...);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task>
Async##CUSTOM(Args&& ...args) {
  TaskNode task_node = CHI_CLIENT->MakeTaskNodeId();
  hipc::LPointer<CUSTOM##Task> task = Async##CUSTOM##Alloc(
      task_node, std::forward<Args>(args)...);
  ingress::MultiQueue *queue = CHI_CLIENT->GetQueue(queue_id_);
  queue->Emplace(TaskPrio::kLowLatency,
                 std::hash<chi::DomainQuery>{}(task->dom_query_),
                 task.shm_);
  return task;
}