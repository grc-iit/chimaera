template<typename ...Args>
void Async##CUSTOM##Construct(CUSTOM##Task *task,
                              const TaskNode &task_node,
                              const DomainQuery &dom_query,
                              Args&& ...args) {
  CHI_CLIENT->ConstructTask<CUSTOM##Task>(
      task, task_node, dom_query, id_, std::forward<Args>(args)...);
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM##Alloc(const TaskNode &task_node,
                                                  Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task =
    CHI_CLIENT->AllocateTask<CUSTOM##Task>();
  Async##CUSTOM##Construct(task.ptr_, task_node, std::forward<Args>(args)...);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM(Args&& ...args) {
  chi::Task *parent_task = CHI_CUR_TASK;
  if (parent_task) {
    return Async##CUSTOM##Base(parent_task,
                               parent_task->task_node_ + 1,
                               std::forward<Args>(args)...);
  } else {
    return Async##CUSTOM##Base(nullptr,
                               CHI_CLIENT->MakeTaskNodeId(),
                               std::forward<Args>(args)...);
  }
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM##Base(Task *parent_task,
                                           const TaskNode &task_node,
                                           Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task = Async##CUSTOM##Alloc(
    task_node, std::forward<Args>(args)...);
  CHI_CLIENT->ScheduleTaskRuntime(parent_task, task, task->pool_);
  return task;
}