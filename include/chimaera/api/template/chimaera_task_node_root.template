template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM##Alloc(const TaskNode &task_node,
                                                  Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task =
    CHM_CLIENT->AllocateTask<CUSTOM##Task>();
  Async##CUSTOM##Construct(task.ptr_, task_node, std::forward<Args>(args)...);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM(Task *parent_task,
                                           const TaskNode &task_node,
                                          Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task = Async##CUSTOM##Alloc(
    task_node, std::forward<Args>(args)...);
  task->YieldInit(parent_task);
  MultiQueue *queue = CHM_CLIENT->GetQueue(queue_id_);
  queue->Emplace(task.ptr_->prio_, task.ptr_->GetLaneHash(), task.shm_);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task>
Async##CUSTOM##Emplace(MultiQueue *queue,
                       const TaskNode &task_node,
                       Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task =
    Async##CUSTOM##Alloc(task_node, std::forward<Args>(args)...);
  queue->Emplace(task.ptr_->prio_, task.ptr_->GetLaneHash(), task.shm_);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task>
Async##CUSTOM##Root(Args&& ...args) {
  TaskNode task_node = CHM_CLIENT->MakeTaskNodeId();
  hipc::LPointer<CUSTOM##Task> task =
    Async##CUSTOM(nullptr, task_node,
                  std::forward<Args>(args)...);
  return task;
}