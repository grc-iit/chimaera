template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM##Alloc(const TaskNode &task_node,
                                                  Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task =
    CHI_CLIENT->AllocateTask<CUSTOM##Task>();
  Async##CUSTOM##Construct(task.ptr_, task_node, std::forward<Args>(args)...);
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task> Async##CUSTOM(Task *parent_task,
                                           const TaskNode &task_node,
                                           Args&& ...args) {
  hipc::LPointer<CUSTOM##Task> task = Async##CUSTOM##Alloc(
    task_node, std::forward<Args>(args)...);
  task->YieldInit(parent_task);
  std::vector<ResolvedDomainQuery> resolved =
    CHI_RPC->ResolveDomainQuery(task->pool_, task->dom_query_, false);
  MultiQueue *queue = CHI_CLIENT->GetQueue(queue_id_);
  DomainQuery dom_query = resolved[0].dom_;
  if (resolved.size() == 1 && resolved[0].node_ == CHI_RPC->node_id_ &&
      dom_query.flags_.All(DomainQuery::kLocal | DomainQuery::kId)) {
    LaneGroup &lane_group = queue->GetGroup(task->prio_);
    u32 lane_id = dom_query.sel_.id_ % lane_group.num_lanes_;
    Lane &lane = lane_group.GetLane(lane_id);
    lane.emplace(task.shm_);
  } else {
    queue->Emplace(task->prio_,
                   std::hash<chi::DomainQuery>{}(task->dom_query_),
                   task.shm_);
  }
  return task;
}
template<typename ...Args>
hipc::LPointer<CUSTOM##Task>
Async##CUSTOM##Root(Args&& ...args) {
  TaskNode task_node = CHI_CLIENT->MakeTaskNodeId();
  hipc::LPointer<CUSTOM##Task> task = Async##CUSTOM##Alloc(
      task_node, std::forward<Args>(args)...);
  MultiQueue *queue = CHI_CLIENT->GetQueue(queue_id_);
  queue->Emplace(TaskPrio::kLowLatency,
                 std::hash<chi::DomainQuery>{}(task->dom_query_),
                 task.shm_);
  return task;
}